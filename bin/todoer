#! /usr/bin/env ruby
require File.expand_path('../lib/todoer',File.dirname(__FILE__))
require 'rb-inotify'
require 'erubis'
require 'tilt'

notif = INotify::Notifier.new

Signal.trap("INT") { notif.stop; exit }

template = Tilt[:erubis].new {<<_____
DUE OR OVERDUE
<% (where(&:due?).or(&:overdue?).or(&:on_today?)).each do |task| %>
-  <%= task.with_categories_and_scheduled_date %> 
<% end %>
--------------------------------------------------------------------------------
DUE TOMORROW
<% (where(&:due_tomorrow?).or(&:on_tomorrow?)).each do |task| %>
-  <%= task.with_categories_and_scheduled_date %>
<% end %>
--------------------------------------------------------------------------------
UNSCHEDULED
<% (where(:not, &:scheduled?)).each do |task| %>
-  <%= task.with_categories %>
<% end %>
--------------------------------------------------------------------------------
BY CATEGORY
<% where.categories.each do |cats, tasks| %>
<%= cats.join(' ') %>:
  <% tasks.each do |task| %>
-  <%= task %>
  <% end %>  
<% end %>
_____
}

modify_proc = lambda {
  t = Todoer.parse('~/.todo')
  presenter = Todoer::Presenter.new( t )
  system('clear')
  puts template.render(presenter)
}


watch_proc = lambda {
  notif.watch(File.expand_path('~/.todo'), :close_write) do 
    modify_proc[] 
    watch_proc[]
  end
}

modify_proc[]
watch_proc[]

notif.run
